@* Shared/ConfirmationModal.razor *@
<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);
        width: 300px;
        text-align: center;
    }

        .modal-content button {
            margin: 10px;
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .modal-content .btn-confirm {
            background-color: #dc3545;
            color: white;
        }

        .modal-content .btn-cancel {
            background-color: #6c757d;
            color: white;
        }
</style>

@if (ShowModal)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <p>@Message</p>
            <div>
                <button class="btn-confirm" @onclick="() => OnConfirm.InvokeAsync(true)">Confirmar</button>
                <button class="btn-cancel" @onclick="() => OnConfirm.InvokeAsync(false)">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<bool> OnConfirm { get; set; }

    public string Message { get; set; } = "¿Está seguro?";
    public bool ShowModal { get; set; } = false;
    public int CurrentItemId { get; set; } // Para guardar el ID del elemento que se está confirmando

    public Task ShowAsync(string message, int itemId = 0)
    {
        Message = message;
        CurrentItemId = itemId;
        ShowModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task HideAsync()
    {
        ShowModal = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
}