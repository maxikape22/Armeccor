@page "/api/Insumos/Editar/{InsumoId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Editar Insumo</h3>

@if (insumo == null)
{
    <p><em>Cargando insumo...</em></p>
}
else
{
    <div class="mb-3">
        <label>Nombre</label>
        <input class="form-control" @bind="insumo.Nombre" placeholder="Ingrese nombre del insumo" />
    </div>

    <div class="mb-3">
        <label>Cantidad Disponible</label>
        <input class="form-control" type="number" @bind="insumo.CantDisponible" />
    </div>

    <div class="mb-3">
        <button class="btn btn-primary me-2" @onclick="GuardarCambios">Guardar Cambios</button>
        <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </div>
}

@code {
    [Parameter]
    public int InsumoId { get; set; }

    private CrearInsumoDTO insumo;

    protected override async Task OnInitializedAsync()
    {
        await CargarInsumo();
    }

    private async Task CargarInsumo()
    {
        try
        {
            insumo = await Http.GetFromJsonAsync<CrearInsumoDTO>($"api/Insumos/{InsumoId}");
            if (insumo == null)
            {
                await JS.InvokeVoidAsync("alert", "No se encontró el insumo.");
                Navigation.NavigateTo("/api/Insumos");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar insumo: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error al cargar insumo. Revisar consola.");
            Navigation.NavigateTo("/api/Insumos");
        }
    }

    private async Task GuardarCambios()
    {
        if (string.IsNullOrWhiteSpace(insumo.Nombre))
        {
            await JS.InvokeVoidAsync("alert", "El nombre del insumo es obligatorio.");
            return;
        }

        try
        {
            var resp = await Http.PutAsJsonAsync<CrearInsumoDTO>($"api/Insumos/{InsumoId}", insumo);
            if (resp.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Insumo actualizado correctamente.");
                Navigation.NavigateTo("/api/Insumos");
            }
            else
            {
                var body = await resp.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error al actualizar insumo: {resp.StatusCode} - {body}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar insumo: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error al actualizar insumo. Revisar consola.");
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/api/Insumos");
    }
}