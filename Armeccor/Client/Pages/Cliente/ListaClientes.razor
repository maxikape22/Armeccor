@page "/api/Clientes"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Gestión de Clientes</h3>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="input-group" style="width: 48%;">
        <input class="form-control" placeholder="Buscar por nombre del cliente..." @bind="filtroNombre"/>
        <button class="btn btn-primary" @onclick="BuscarPorNombre">Buscar</button>
    </div>
    <div>
        <button class="btn btn-success" @onclick="IrANuevoCliente">+ Nuevo Cliente</button>
    </div>
</div>

@if (clientes == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>DNI</th>
                <th>Dirección</th>
                <th>Teléfono</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in clientes)
            {
                <tr>
                    <td>@c.Nombre</td>
                    <td>@c.DNI</td>
                    <td>@c.Direccion</td>
                    <td>@c.Telefono</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => IrAEditarCliente(c.Id)">
                            Editar
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmarEliminar(c.Id, c.Nombre)">
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private List<Cliente> clientes;
    private Cliente cliente = new Cliente();
    private bool editando = false;
    private string filtroNombre = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        clientes = await Http.GetFromJsonAsync<List<Cliente>>("api/Clientes");
    }

    private async Task ConfirmarEliminar(int id, string nombre)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar el cliente {nombre}?");
        if (confirm)
        {
            await EliminarCliente(id);
        }
    }

    private async Task EliminarCliente(int id)
    {
        try
        {
            var resp = await Http.DeleteAsync($"/api/Clientes/{id}");
            if (resp.IsSuccessStatusCode)
            {
                clientes.RemoveAll(a => a.Id == id);
                await JS.InvokeVoidAsync("alert", "Cliente eliminado.");
            }
            else
            {
                var body = await resp.Content.ReadAsStringAsync();
                Console.WriteLine($"Error al eliminar el cliente: {resp.StatusCode} - {body}");
                await JS.InvokeVoidAsync("alert", $"Error al eliminar cliente: {resp.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar cliente: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error al eliminar cliente. Ver consola.");
        }
    }

    private async Task Guardar()
    {
        if (editando)
        {
            await Http.PutAsJsonAsync($"api/Clientes/{cliente.Id}", cliente);
        }
        else
        {
            await Http.PostAsJsonAsync("api/Clientes", cliente);
        }

        clientes = await Http.GetFromJsonAsync<List<Cliente>>("api/Clientes");
        cliente = new Cliente();
        editando = false;
    }

    private void IrANuevoCliente()
    {
        Navigation.NavigateTo("/api/Clientes/AgregarCliente");
    }

    public void IrAEditarCliente(int id)
    {
        Navigation.NavigateTo($"/api/Clientes/EditarCliente/{id}");
    }

    public async Task BuscarPorNombre()
    {
        if (string.IsNullOrWhiteSpace(filtroNombre))
        {
            cliente = cliente;
        }
        else
        {
            clientes = clientes
                .Where(a => a.Nombre.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (filtroNombre.Equals(string.Empty))
        {
            await OnInitializedAsync();
        }
    }
}