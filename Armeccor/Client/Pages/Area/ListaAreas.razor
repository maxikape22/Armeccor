@page "/api/Areas"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Gestión de Áreas</h3>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="input-group" style="width: 48%;">
        <input class="form-control" placeholder="Buscar por nombre de área..." @bind="filtroNombre" />
        <button class="btn btn-primary" @onclick="BuscarPorNombre">Buscar</button>
    </div>
    <div>
        <button class="btn btn-success" @onclick="IrANuevaArea">+ Nueva Área</button>
    </div>
</div>

@if (CrearAreaDTO == null)
{
    <p><em>Cargando áreas...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Tiempo</th>
                <th>Estado</th>
                <th style="width:120px">Acción</th>
            </tr>
        </thead>
        <tbody>
            @if (CrearAreaDTO != null && CrearAreaDTO.Any())
            {
                @foreach (var a in CrearAreaDTO)
                {
                    <tr>
                        <td>@a.NombreArea</td>
                        <td>@a.Tiempo</td>
                        <td>@a.Estado</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => IrAEditarArea(a.Id)">
                                Editar
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmarEliminar(a.Id,a.NombreArea)">
                                Eliminar
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="4" class="text-center">No se encontraron áreas.</td></tr>
            }
        </tbody>
    </table>
}
@code 
{
    private List<AreaDTO> areas = new();
    private List<AreaListaDTO> CrearAreaDTO = new();
    private AreaListaDTO Areas = new AreaListaDTO();
    private List<CrearAreaDTO> areaDTOs = new List<CrearAreaDTO>();
    private bool isLoading = true;
    private CrearAreaDTO areaDTO = new CrearAreaDTO();

    private string filtroNombre = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Cargar();
        Areas = new AreaListaDTO();
    }

    private async Task Cargar()
    {
        // El controlador devuelve entidades Area en GET, así que mapeamos a List<Area>
        CrearAreaDTO = await Http.GetFromJsonAsync<List<AreaListaDTO>>("api/Areas") ?? new();
    }


    private List<AreaListaDTO> CrearAreaDTOFiltradas = new(); // lista filtrada

    private async Task BuscarPorNombre()
    {
        if (string.IsNullOrWhiteSpace(filtroNombre))
        {
            CrearAreaDTO = CrearAreaDTO;
        }
        else
        {
            CrearAreaDTO = CrearAreaDTO
                .Where(a => a.NombreArea.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (filtroNombre.Equals(string.Empty))
        {
            await Cargar();
        }
    }

    private async Task ConfirmarEliminar(int id,string nombre)
    {
        var ok = await JS.InvokeAsync<bool>("confirm", $"¿Desea eliminar el área: {nombre}?");
        if (!ok) return;
        await EliminarArea(id);
        await Cargar();
    }

    private async Task EliminarArea(int id)
    {
        try
        {
            var resp = await Http.DeleteAsync($"/api/Areas/{id}");
            if (resp.IsSuccessStatusCode)
            {
                areas.RemoveAll(a => a.Id == id);
                await JS.InvokeVoidAsync("alert", "Área eliminada.");
            }
            else
            {
                var body = await resp.Content.ReadAsStringAsync();
                Console.WriteLine($"Error al eliminar área: {resp.StatusCode} - {body}");
                await JS.InvokeVoidAsync("alert", $"Error al eliminar área: {resp.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar área: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error al eliminar área. Ver consola.");
        }
    }

    private void IrANuevaArea()
    {
        Navigation.NavigateTo("/api/Areas/AgregarArea");
    }

    private void IrAEditarArea(int id)
    {
        Navigation.NavigateTo($"/api/Areas/Editar/{id}"); 
    }
}
