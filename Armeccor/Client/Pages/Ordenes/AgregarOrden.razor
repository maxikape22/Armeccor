@page "/ordenes/nueva"
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient http

<PageTitle>Crear Orden</PageTitle>

<style>
    .form-container {
        max-width: 600px;
        margin: 50px auto;
        padding: 30px;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,.1);
        background-color: #fff;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }

        .form-group input[type="text"], .form-group input[type="number"], .form-group select {
            width: calc(100% - 20px);
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1em;
        }

    .btn-submit {
        background-color: #28a745;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color .3s ease;
    }

        .btn-submit:hover {
            background-color: #218838;
        }

    .validation-summary ul {
        list-style-type: none;
        padding: 0;
        margin: 15px 0;
        color: #dc3545;
        border: 1px solid #dc3545;
        background-color: #f8d7da;
        border-radius: 4px;
        padding: 10px;
    }

    .validation-message {
        color: #dc3545;
        font-size: .9em;
        margin-top: 5px;
        display: block;
    }
</style>

<div class="form-container">
    <h3>Crear Orden</h3>

    <EditForm Model="@nuevaOrden" OnValidSubmit="Grabar" OnInvalidSubmit="HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="nroOT">N° OT:</label>
            <InputNumber id="nroOT" class="form-control" @bind-Value="nuevaOrden.NroOT" />
            <ValidationMessage For="@(() => nuevaOrden.NroOT)" />
        </div>

        <div class="form-group">
            <label for="nombreorden">Nombre de orden:</label>
            <InputText id="nombreorden" class="form-control" @bind-Value="nuevaOrden.NombreOrden" />
            <ValidationMessage For="@(() => nuevaOrden.Descripcion)" />
        </div>

        <div class="form-group">
            <label for="descripcion">Descripción:</label>
            <InputText id="descipcion" class="form-control" @bind-Value="nuevaOrden.Descripcion" />
            <ValidationMessage For="@(() => nuevaOrden.Descripcion)" />
        </div>

        <div class="form-group">
            <InputSelect @bind-Value="nuevaOrden.Estado">
                <option value="">-- Seleccionar estado --</option>
                <option value="Abierto">Abierto</option>
                <option value="Cerrado">Cerrado</option>
                <option value="Procesando">Procesando</option>
                <option value="Iniciando">Iniciando</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label>Fecha Inicio:</label>
            <InputDate class="form-control" @bind-Value="nuevaOrden.FechaInicio" />
            <ValidationMessage For="@(() => nuevaOrden.FechaInicio)" />
        </div>

        <div class="form-group">
            <label>Fecha Pactada:</label>
            <InputDate class="form-control" @bind-Value="nuevaOrden.FechaPactada" />
            <ValidationMessage For="@(() => nuevaOrden.FechaPactada)" />
        </div>

        <div class="form-group">
            <label>Fecha Entrega:</label>
            <InputDate class="form-control" @bind-Value="nuevaOrden.FechaEntrega" />
            <ValidationMessage For="@(() => nuevaOrden.FechaEntrega)" />
        </div>


        <div class="form-group">
            <label for="idCliente">Cliente:</label>
            @if (clientes == null)
            {
                <p>Cargando clientes...</p>
            }
            else if (!clientes.Any())
            {
                <p>No hay clientes disponibles. Cree uno primero.</p>
            }
            else
            {
                <InputSelect id="idCliente" class="form-control" @bind-Value="nuevaOrden.ClienteId">
                    <option value="0" disabled selected>-- Seleccione un Cliente --</option>
                    @foreach (var cliente in clientes)
                    {
                        <option value="@cliente.Id">@cliente.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => nuevaOrden.ClienteId)" />
            }
        </div>

        <div class="form-group">
            <label for="idArea">Área:</label>
            @if (areas == null)
            {
                <p>Cargando áreas...</p>
            }
            else if (!areas.Any())
            {
                <p>No hay áreas disponibles. Cree una primero.</p>
            }
            else
            {
                <InputSelect id="idArea" class="form-control" @bind-Value="nuevaOrden.AreaId">
                    <option value="0" disabled selected>-- Seleccione un Área --</option>
                    @foreach (var area in areas)
                    {
                        <option value="@area.Id">@area.NombreArea</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => nuevaOrden.AreaId)" />
            }
        </div>
@* 
        <div class="form-group">
            <label for="idCliente">Cliente:</label>
            @if (clientes == null || !clientes.Any())
            {
                <p>Cargando clientes...</p>
            }
            else
            {
                <InputSelect id="idCliente" class="form-control" @bind-Value="nuevaOrden.ClienteId">
                    <option value="0">-- Seleccione un cliente --</option>
                    @foreach (var cliente in clientesDict)
                    {
                        <option value="@cliente.Key">@cliente.Value</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => nuevaOrden.ClienteId)" />
            }
        </div>

        <div class="form-group">
            <label>Área:</label>
            @if (areasDict == null || !areasDict.Any())
            {
                <p>Cargando áreas...</p>
            }
            else
            {
                <InputSelect class="form-control" @bind-Value="nuevaOrden.AreaId">
                    <option value="0">-- Seleccione un área --</option>
                    @foreach (var kv in areasDict)
                    {
                        <option value="@kv.Key">@kv.Value</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => nuevaOrden.AreaId)" />
            }
        </div> *@

       @*  <div class="form-group">
            <label>Plano (opcional):</label>
            @if (planosDict == null || !planosDict.Any())
            {
                <p>Cargando planos...</p>
            }
            else
            {
                <InputSelect class="form-control" @bind-Value="nuevaOrden.PlanoId">
                    <option value="">-- Seleccione un plano --</option>
                    @foreach (var kv in planosDict)
                    {
                        <option value="@kv.Key">@kv.Value</option>
                    }
                </InputSelect>
            }
        </div> *@

        <button class="btn btn-primary btn-submit" type="submit">Aceptar</button>
        <button class="btn btn-secondary" type="button" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>

@code {
    private CrearOrdenDTO nuevaOrden = new CrearOrdenDTO();
    // Usa los DTOs ClienteDTO y AreaDTO para cargar las listas, no CrearClienteDTO/CrearAreaDTO
    private List<ClienteDTO>? clientes;
    private List<AreaDTO>? areas;
    // Eliminadas las variables y diccionarios que no son necesarios para este componente:
    // private List<Plano> planos;
    // private Dictionary<int, string> planosDict = new Dictionary<int, string>();
    // private Dictionary<int, string> clientesDict = new Dictionary<int, string>();
    // private Dictionary<int, string> areasDict = new Dictionary<int, string>();
    // private Area Area; // También eliminada si no se usa

    protected override async Task OnInitializedAsync()
    {
        // Inicializar los IDs para que las opciones por defecto del dropdown funcionen con la validación Range
        nuevaOrden.ClienteId = 0;
        nuevaOrden.AreaId = 0;

        // Cargar datos en paralelo para mayor eficiencia
        var loadClientsTask = LoadClientes();
        var loadAreasTask = LoadAreas();
        // var loadPlanosTask = LoadPlanos(); // Descomentar si necesitas planos aquí

        await Task.WhenAll(loadClientsTask, loadAreasTask); // await Task.WhenAll(loadClientsTask, loadAreasTask, loadPlanosTask);
    }

    private async Task LoadClientes()
    {
        try
        {
            // Cargar clientes usando ClienteDTO (asume que tu API devuelve este tipo para el listado)
            clientes = await http.GetFromJsonAsync<List<ClienteDTO>>("api/Clientes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar clientes: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar clientes: {ex.Message}");
            clientes = new List<ClienteDTO>(); // Asegura que la lista no sea null
        }
    }

    private async Task LoadAreas()
    {
        try
        {
            // Cargar áreas usando AreaDTO (asume que tu API devuelve este tipo para el listado)
            areas = await http.GetFromJsonAsync<List<AreaDTO>>("api/Areas");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar áreas: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar áreas: {ex.Message}");
            areas = new List<AreaDTO>(); // Asegura que la lista no sea null
        }
    }

    // El método LoadPlanos fue eliminado de este componente, si lo necesitas, agrégalo de nuevo.
    // private async Task LoadPlanos()
    // {
    //     try
    //     {
    //         planos = await http.GetFromJsonAsync<List<Plano>>("api/Planos");
    //     }
    //     catch (Exception ex)
    //     {
    //         await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar planos: {ex.Message}");
    //         planos = new List<Plano>();
    //     }
    // }

    private async Task Grabar()
    {
        try
        {
            var response = await http.PostAsJsonAsync("api/Ordenes", nuevaOrden);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Orden creada con éxito!");
                navigationManager.NavigateTo("/ordenes"); // O "/ListaOrdenes" si esa es tu ruta
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Error al guardar orden: " + errorContent);
                await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar orden: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado al enviar la orden: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Ocurrió un error inesperado: {ex.Message}");
        }
    }

    private void HandleInvalidSubmit()
    {
        JSRuntime.InvokeVoidAsync("alert", "Por favor, corrija los errores del formulario antes de continuar.");
    }

    private void Cancelar()
    {
        navigationManager.NavigateTo("/ordenes"); // O "/ListaOrdenes" si esa es tu ruta
    }
}