@page "/Ordenes"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

<PageTitle>Órdenes</PageTitle>

@* --- ESTILOS CSS INTEGRADOS DIRECTAMENTE EN EL COMPONENTE --- *@
<style>
    .main-container {
        display: flex;
        min-height: 100vh;
        width: 100%; /* Asegura que ocupe todo el ancho disponible */
    }

    .sidebar {
        background-color: #333;
        color: white;
        width: 150px;
        padding: 20px 0;
        flex-shrink: 0;
    }

        .sidebar h3 {
            text-align: center;
            margin-bottom: 20px;
        }

        .sidebar hr {
            border: 0;
            border-top: 1px solid #555;
            margin: 10px 0;
        }

        .sidebar a {
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            display: block;
            transition: background-color 0.3s;
        }

            .sidebar a:hover {
                background-color: #555;
            }

    .content-area {
        flex-grow: 1;
        padding: 20px;
        background-color: #fff;
        overflow-x: auto; /* Permite desplazamiento horizontal si la tabla es muy ancha */
    }

    .header {
        background-color: #f0f0f0;
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #ddd;
        margin-bottom: 20px;
    }

    .header-left, .header-right {
        display: flex;
        align-items: center;
    }

        .header-left i {
            margin-right: 10px;
            color: #555;
        }

        .header-left input {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 260px;
        }

        .header-right .status-select {
            margin-right: 15px;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: white;
            cursor: pointer;
        }

        .header-right .btn-new-order {
            background-color: #4CAF50;
            color: white;
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
            display: flex;
            align-items: center;
            transition: background-color 0.3s;
        }

            .header-right .btn-new-order i {
                margin-right: 5px;
            }

            .header-right .btn-new-order:hover {
                background-color: #45a049;
            }

    .order-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .order-table th, .order-table td {
            border: 1px dotted #ccc;
            padding: 8px;
            text-align: left;
            vertical-align: top;
        }

        .order-table th {
            background-color: #e0e0e0;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 0.85em;
            white-space: nowrap;
        }

        .order-table td .btn-action {
            background: none;
            border: none;
            cursor: pointer;
            margin: 0 5px;
            font-size: 1.1em;
            color: #555;
            transition: color 0.2s;
        }

            .order-table td .btn-action:hover {
                color: #007bff;
            }

        .order-table td .btn-delete {
            color: #dc3545;
        }

            .order-table td .btn-delete:hover {
                color: #c82333;
            }

    .btn-action[disabled] {
        opacity: .5;
        cursor: not-allowed;
    }
</style>
@* --- FIN ESTILOS CSS INTEGRADOS --- *@

<div class="main-container">
    <div class="sidebar">
        <h3>ARme design</h3>
        <hr />
        <a href="/api/Clientes">Clientes</a>
        <a href="/api/Areas">Areas</a>
        <a href="/api/Ordenes">Ordenes de trabajo</a>
        <a href="/api/Insumos">Insumos</a>
        <a href="/api/Entregas">Entregas</a>
    </div>

    <div class="content-area">
        <div class="header">
            <div class="header-left">
                <i class="fas fa-search"></i>
                <!-- 🔎 Filtra SOLO por Nombre de la orden o Descripción -->
                <input type="text"
                       placeholder="Buscar por nombre o descripción"
                       @bind="SearchText"
                       @bind:event="oninput" />
            </div>
            <h2>ÓRDENES</h2>
            <div class="header-right">
                <!-- ✅ Filtro por estado (case-insensitive) -->
                <select @bind="SelectedStatus" @bind:event="onchange" class="status-select">
                    <option value="">Estado</option>
                    <option value="Abierto">Abierto</option>
                    <option value="Cerrado">Cerrado</option>
                    <option value="Cancelado">Cancelado</option>
                    <option value="Procesando">Procesando</option>
                    <option value="Iniciando">Iniciando</option>
                    <option value="Terminando">Terminando</option>
                </select>
                <button class="btn-new-order" @onclick="NavigateToNewOrder">
                    <i class="fas fa-plus-circle"></i> Nueva orden
                </button>
            </div>
        </div>

        @if (isLoading)
        {
            <p><em>Cargando órdenes...</em></p>
        }
        else if (filteredOrders == null || !filteredOrders.Any())
        {
            <p>No se encontraron órdenes.</p>
        }
        else
        {
            <table class="order-table">
                <thead>
                    <tr>
                        <th>Nº de OT</th>
                        <th>Nombre de la orden</th>
                        <th>Descripción</th>
                        <th>Estado</th>
                        <th>Fecha de inicio</th>
                        <th>Fecha pactada</th>
                        <th>Fecha de entrega</th>
                        <th>Cliente</th>
                        <th>Área (DTO)</th>
                        <th>Área actual</th>
                        <th>Acción</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var orden in filteredOrders)
                    {
                        <tr>
                            <td>@orden.NroOT</td>
                            <td>@orden.NombreOrden</td>
                            <td>@orden.Descripcion</td>
                            <td>@orden.Estado</td>
                            <td>@orden.FechaInicio.ToShortDateString()</td>
                            <td>@orden.FechaPactada.ToShortDateString()</td>
                            <td>@orden.FechaEntrega.ToShortDateString()</td>
                            <td>@orden.NombreCliente</td>

                            <!-- Conservamos ambas columnas como tenías -->
                            <td>@orden.NombreArea</td>

                            <td>@GetAreaActual(orden)</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteOrder(orden.Id)">Eliminar</button>
                            </td>
                            <td>
                                <button class="btn-action" @onclick="(() => ChangeOrderStatus(orden.Id, orden))" title="Cambiar Estado">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn-action" @onclick="(() => ViewAreaDetails(orden.Id))" title="Ver Área">
                                    <i class="fas fa-map-marker-alt"></i>
                                </button>
                                <button class="btn-action" @onclick="(() => ViewPlans(orden.Id))" title="Ver Planos">
                                    <i class="fas fa-file-alt"></i>
                                </button>
                                <button class="btn-action" @onclick="(() => ViewSupplies(orden.Id))" title="Ver Insumos">
                                    <i class="fas fa-boxes"></i>
                                </button>

                                <!-- 🗑️ Botón eliminar funcionando -->
                                <button class="btn-action btn-delete"
                                        disabled="@(isDeletingId == orden.Id)"
                                        @onclick="(() => DeleteOrder(orden.Id))"
                                        title="Eliminar">
                                    @if (isDeletingId == orden.Id)
                                    {
                                        <i class="fas fa-spinner fa-spin"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-trash-alt"></i>
                                    }
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@* Modal de Confirmación - Componente separado *@
<ConfirmationModal @ref="confirmationModal" OnConfirm="ConfirmDelete" />

@code {
    private List<OrdenDetalleDTO>? orders;
    private List<OrdenDetalleDTO>? filteredOrders;
    private bool isLoading = true;
    private OrdenDetalleDTO ordenDetalleDTO = new OrdenDetalleDTO();
    private EntregaDetalleDTO entregaDetalleDTO = new EntregaDetalleDTO();
    private ConfirmationModal? confirmationModal;
    private int? isDeletingId = null;

    // ✅ Propiedades con setter que dispara el filtro
    private string _searchText = string.Empty;
    private string SearchText
    {
        get => _searchText;
        set { _searchText = value ?? string.Empty; FilterOrders(); }
    }

    private string _selectedStatus = string.Empty;
    private string SelectedStatus
    {
        get => _selectedStatus;
        set { _selectedStatus = value ?? string.Empty; FilterOrders(); }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        isLoading = true;
        try
        {
            orders = await Http.GetFromJsonAsync<List<OrdenDetalleDTO>>("api/Ordenes");
            FilterOrders();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar órdenes: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar órdenes: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterOrders()
    {
        if (orders == null)
        {
            filteredOrders = new List<OrdenDetalleDTO>();
            return;
        }

        // 🔎 SOLO Nombre de la orden o Descripción (insensible a mayús/acentos)
        string term = Normalize(SearchText);

        filteredOrders = orders
            .Where(o =>
            {
                bool textOk =
                    string.IsNullOrWhiteSpace(term) ||
                    Normalize(o.NombreOrden).Contains(term) ||
                    Normalize(o.Descripcion).Contains(term);

                bool estadoOk =
                    string.IsNullOrWhiteSpace(SelectedStatus) ||
                    Normalize(o.Estado) == Normalize(SelectedStatus);

                return textOk && estadoOk;
            })
            .ToList();
    }

    private static string Normalize(string? input)
    {
        if (string.IsNullOrWhiteSpace(input)) return string.Empty;
        var formD = input.ToUpperInvariant().Normalize(System.Text.NormalizationForm.FormD);
        var sb = new System.Text.StringBuilder(formD.Length);
        foreach (var ch in formD)
        {
            var uc = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(ch);
            if (uc != System.Globalization.UnicodeCategory.NonSpacingMark)
                sb.Append(ch);
        }
        return sb.ToString().Normalize(System.Text.NormalizationForm.FormC);
    }

    private string GetAreaActual(OrdenDetalleDTO orden)
    {
        // Si tu DTO trae NombreArea, lo mostramos; si además hay AreasDeLaOrden, mostramos la primera como "actual".
        if (!string.IsNullOrWhiteSpace(orden.NombreArea))
            return orden.AreasDeLaOrden?.FirstOrDefault()?.NombreArea ?? orden.NombreArea;

        return orden.AreasDeLaOrden?.FirstOrDefault()?.NombreArea ?? "N/A";
    }

    private void NavigateToNewOrder()
    {
        NavigationManager.NavigateTo("/ordenes/nueva");
    }

    private async Task ChangeOrderStatus(int id, OrdenDetalleDTO currentOrden)
    {
        string? newStatus = await JSRuntime.InvokeAsync<string>("prompt", "Ingrese el nuevo estado para la orden (Abierto, Cerrado, Procesando, etc.):");
        if (!string.IsNullOrWhiteSpace(newStatus))
        {
            var updateDto = new CrearOrdenDTO
            {
                NroOT = currentOrden.NroOT,
                NombreOrden = currentOrden.NombreOrden,
                Descripcion = currentOrden.Descripcion,
                Estado = newStatus,
                FechaInicio = currentOrden.FechaInicio,
                FechaPactada = currentOrden.FechaPactada,
                FechaEntrega = currentOrden.FechaEntrega,
                AreaId = currentOrden.AreaId,
                ClienteId = currentOrden.ClienteId,
                PlanoId = currentOrden.PlanoId
            };

            var response = await Http.PutAsJsonAsync($"api/Ordenes/{id}", updateDto);
            if (response.IsSuccessStatusCode)
            {
                // Refrescamos local sin otro GET
                var o = orders?.FirstOrDefault(x => x.Id == id);
                if (o is not null) o.Estado = newStatus;
                FilterOrders();
                await JSRuntime.InvokeVoidAsync("alert", "Estado de la orden actualizado con éxito.");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error al actualizar el estado: {response.StatusCode} - {errorContent}");
            }
        }
    }

    private void ViewAreaDetails(int id)
    {
        JSRuntime.InvokeVoidAsync("alert", $"Ver detalles del área para la Orden ID: {id}");
    }

    private void ViewPlans(int id)
    {
        JSRuntime.InvokeVoidAsync("alert", $"Ver planos para la Orden ID: {id}");
    }

    private void ViewSupplies(int id)
    {
        JSRuntime.InvokeVoidAsync("alert", $"Ver insumos para la Orden ID: {id}");
    }

    

    // 🗑️ Flujo de eliminación con modal
    private async Task DeleteOrder(int id)
    {
        if (confirmationModal != null)
        {
            await confirmationModal.ShowAsync($"¿Está seguro que desea eliminar la orden de fecha: {ordenDetalleDTO.FechaEntrega}?", id);
        }
    }


    private async Task ConfirmDelete(bool confirmed)
    {
        if (confirmed && confirmationModal != null)
        {
            await ExecuteDelete(confirmationModal.CurrentItemId);
        }
        // Si el usuario cancela, no se hace nada o puedes llamar a Cancelar() aquí
        else
        {
            Cancelar();
        }
    }

    // private async Task ConfirmDelete(bool confirmed)
    // {
    //     if (confirmed && confirmationModal != null)
    //     {
    //         await ExecuteDelete(confirmationModal.CurrentItemId);
    //     }
    // }

    // private async Task ExecuteDelete(int idToDelete)
    // {
    //     try
    //     {
    //         isDeletingId = idToDelete;

    //         var response = await Http.DeleteAsync($"api/Ordenes/{idToDelete}");
    //         if (response.IsSuccessStatusCode)
    //         {
    //             // Actualizamos la lista local y re-filtramos
    //             orders?.RemoveAll(o => o.Id == idToDelete);
    //             FilterOrders();
    //             await JSRuntime.InvokeVoidAsync("alert", "Orden eliminada con éxito.");
    //         }
    //         else
    //         {
    //             var errorContent = await response.Content.ReadAsStringAsync();
    //             await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar la orden: {response.StatusCode} - {errorContent}");
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error al eliminar: {ex.Message}");
    //         await JSRuntime.InvokeVoidAsync("alert", $"Ocurrió un error al intentar eliminar la orden: {ex.Message}");
    //     }
    //     finally
    //     {
    //         isDeletingId = null;
    //     }
    // }


    

    private async Task ExecuteDelete(int idToDelete)
    {
        try
        {
            isDeletingId = idToDelete;

            // Oculta el modal de confirmación antes de cualquier otra acción
            if (confirmationModal != null)
            {
                await confirmationModal.HideAsync();
            }

            var response = await Http.DeleteAsync($"api/Ordenes/{idToDelete}");

            if (response.IsSuccessStatusCode)
            {
                // La eliminación fue exitosa. Recargamos la página para resetear la UI.
                await JSRuntime.InvokeVoidAsync("alert", "Orden eliminada con éxito.");
                navigationManager.NavigateTo("https://localhost:7253/Ordenes", true); // <--- Esta es la clave
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar la orden: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Ocurrió un error al intentar eliminar la orden: {ex.Message}");
        }
        finally
        {
            isDeletingId = null;
        }
    }

    // Remueve o no uses este método, ya que la navegación ahora está en ExecuteDelete
    private void Cancelar()
    {
        navigationManager.NavigateTo("/api/ListaOrdenes");
    }


    // private CrearOrdenDTO crearOrdenDTO = new CrearOrdenDTO();

    // private async Task Eliminar(int id)
    // {
    //     var resp = await Http.DeleteAsync($"api/Ordenes/{id}");

    //     if (confirmationModal != null)
    //     {
    //         await confirmationModal.ShowAsync($"¿Está seguro que desea eliminar la orden: {id}", id);
    //     }
    //     // if (!resp.IsSuccessStatusCode)
    //     // {
    //     //     var err = await resp.Content.ReadAsStringAsync();
    //     //     Console.WriteLine($"Error al borrar la orden: {err}");
    //     // }

    //     //await LoadOrders();
    //     //Cancelar();
    // }


   
    

    // private void Cancelar()
    // {
    //     navigationManager.NavigateTo("/api/ListaOrdenes");
    // }
}
